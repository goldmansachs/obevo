/**
 * Copyright 2017 Goldman Sachs.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
options {
    JAVA_UNICODE_ESCAPE = true;
    IGNORE_CASE=true;
    STATIC=false;
    MULTI=true;
    VISITOR=true;
    NODE_USES_PARSER=true;
    NODE_FACTORY = true;
}

PARSER_BEGIN(SqlParser)
package com.gs.obevo.db.sqlparser.syntaxparser;

public class SqlParser {}

PARSER_END(SqlParser)


/* WHITE SPACE */

SPECIAL_TOKEN :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  "--" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}


<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < CREATE: "create" >
| < ALTER: "alter" >
| < ADD: "add" >
| < DROP: "drop" >
| < TABLE: "table" >
| < INDEX: "index" >
| < COLUMN: "column" >
| < SEQUENCE: "sequence" >
| < TRIGGER: "trigger" >
| < CONSTRAINT: "constraint" >
| < PRIMARY: "primary" >
| < FOREIGN: "foreign" >
| < KEY: "key" >
| < ON: "on" >
| < UNIQUE: "unique" >
| < CLUSTERED: "clustered" >
| < NONCLUSTERED: "nonclustered" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < STRING_LITERAL:
      ("\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\"")
      |
      ("'"
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "'")
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: (<LETTER>|<DIGIT>|<LBRACE>|<RBRACE>|<DOLLAR>|<DOT>|<POUND>|<COLON>)+ >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < MINUS: "-" >
| < ASSIGN: "=" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < DOLLAR: "$" >
| < DOT: "." >
| < POUND: "#" >
| < COLON: ":" >
}



/*****************************************
 * THE SQL LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

ASTCompilationUnit CompilationUnit() :
{}
{
    ( CreateStatement() | AlterStatement() | DropStatement() )
    <EOF>
    {
        return jjtThis;
    }
}

void AlterStatement() :
{}
{
    <ALTER> <TABLE> TableName() ( AlterTableAdd() | DropStatement() )
}

void AlterTableAdd() :
{}
{
    <ADD> ConstraintClause()
}

void DropStatement() :
{}
{
    <DROP> DropObjectType() DropObjectName() [ PostObjectTableClauses() ]
}

void CreateStatement() :
{}
{
    <CREATE> ( LOOKAHEAD(3) CreateTable() | CreateIndex() )
}

void CreateTable() :
{}
{
    <TABLE>
    TableName()
    "(" CreateTableColumnList() ( LOOKAHEAD(2) "," CreateTableEnd() )* [ "," ] ")"
    [ PostObjectTableClauses() ]
}

void CreateTableEnd() :
{}
{
    ConstraintClause() | PrimaryKeyClause() | UniqueClause()
    /*| OtherConstraintClause() */
}

void ConstraintClause() :
{}
{
    <CONSTRAINT> ConstraintName()
    (   LOOKAHEAD(3) PrimaryKeyClause()
        | LOOKAHEAD(3) UniqueClause()
        | OtherConstraintClause()
    )
}

void PrimaryKeyClause() :
{}
{
    <PRIMARY> <KEY> [ ClusterClause() ] IndexColumnList() [ LOOKAHEAD(2) PostConstraintClauses() ]
}

void UniqueClause() :
{}
{
    <UNIQUE>  [ ClusterClause() ] IndexColumnList() [ LOOKAHEAD(2) PostConstraintClauses() ]
}

void CreateIndex() :
{}
{
    [ Unique() ] [ ClusterClause() ] [ LOOKAHEAD(2) IndexQualifier() ] <INDEX>
    IndexName() <ON> TableName()
    IndexColumnList()
    [ PostObjectTableClauses() ]
}

void Unique() :
{}
{
    <UNIQUE>
}

void ClusterClause() :
{}
{
    ( <CLUSTERED> | <NONCLUSTERED> )
}

void DropObjectType() :
{}
{
    <TABLE> | <INDEX> | <CONSTRAINT>
}

void TableName() :
{}
{
    IdentifierName()
}

void DropObjectName() :
{}
{
    IdentifierName()
}

void ConstraintName() :
{}
{
    IdentifierName()
}

void IndexName() :
{}
{
    IdentifierName()
}

void CreateTableColumnList() :
{}
{
    CreateTableColumn()
    ( LOOKAHEAD(2) "," CreateTableColumn()
    ) *
}

void CreateTableColumn() :
{}
{
  ColumnName() DataType() [ LOOKAHEAD(2) PostColumnClauses() ]
}

// only for Sybase IQ, just need to say qualifier
void IndexQualifier() :
{}
{
    <IDENTIFIER>
}

void ColumnName() :
{}
{
    IdentifierName()
}

void DataTypeName() :
{}
{
    IdentifierName()
}

void IdentifierName() :
{}
{
    <IDENTIFIER> | <TABLE> | <INDEX> | <SEQUENCE>
}

void DataType() :
{}
{
  DataTypeName() [ LOOKAHEAD(2) "(" DataTypeLenList() ")" ]
}

void DataTypeLenList() :
{}
{
    <INTEGER_LITERAL>
    ( "," <INTEGER_LITERAL>
    ) *
}


void NoCommaSimpleExpression() :
{}
{
    IdentifierName() | <STRING_LITERAL> | <PRIMARY> | <KEY> | <UNIQUE> | <CONSTRAINT>
    | <INTEGER_LITERAL>
    | <FLOATING_POINT_LITERAL>
    | <MINUS>
    | <ASSIGN>
}

void SimpleExpression() :
{}
{
    NoCommaSimpleExpression()
    | ","
}


/****** START EXPRESSION BLOCK THAT ALLOWS COMMAS ******/
void ExpressionList() :
{}
{
    Expression() (LOOKAHEAD(500) Expression())*
}

void Expression() :
{}
{
    SimpleExpression() | NestedExpression()
}

void NestedExpression() :
{}
{
    "("
    NestedExpressionList()
    ( "," NestedExpressionList() ) *
    ")"
}

void NestedExpressionList() :
{}
{
    Expression()
    ( LOOKAHEAD(2) Expression() ) *
}
/****** END EXPRESSION BLOCK THAT ALLOWS COMMAS ******/

/****** START EXPRESSION BLOCK THAT NoComma ******/
void NoCommaExpressionList() :
{}
{
    NoCommaExpression() (LOOKAHEAD(2) NoCommaExpression())*
}

void NoCommaExpression() :
{}
{
    NoCommaSimpleExpression() | NoCommaNestedExpression()
}

void NoCommaNestedExpression() :
{}
{
    "("
    [ NoCommaNestedExpressionList() ( "," NoCommaNestedExpressionList() ) * ]
    ")"
}

void NoCommaNestedExpressionList() :
{}
{
    NoCommaExpression()
    ( LOOKAHEAD(2) NoCommaExpression() ) *
}
/****** END EXPRESSION BLOCK THAT NoComma ******/


void PostColumnClauses() :
{}
{
    NoCommaExpressionList()
}

void PostConstraintClauses() :
{}
{
    NoCommaExpressionList()
}

void PostObjectTableClauses() :
{}
{
    ExpressionList()
}

void OtherConstraintClause() :
{}
{
    ExpressionList()
}

void IndexColumnList() :
{}
{
    NestedExpression()
}
