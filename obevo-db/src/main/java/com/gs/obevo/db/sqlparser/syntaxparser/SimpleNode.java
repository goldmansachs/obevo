/**
 * Copyright 2017 Goldman Sachs.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=*,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.gs.obevo.db.sqlparser.syntaxparser;

public class SimpleNode implements Node {

    private Node parent;
    private Node[] children;
    private final int id;
    private Object value;  // not used?
    private SqlParser parser;

    private Token first;
    private Token last;  // new

    public SimpleNode(int i) {
        this.id = i;
    }

    public SimpleNode(SqlParser p, int i) {
        this(i);
        this.parser = p;
    }

    //  public static Node jjtCreate(int id) {
//    return new SimpleNode(id);
//  }
//
    public static Node jjtCreate(SqlParser p, int id) {
        return new SimpleNode(p, id);
    }

    public void jjtOpen() {
        this.first = this.parser.getToken(1);    // new
    }

    public void jjtClose() {
        this.last = this.parser.getToken(0);    // new
    }

    public Token getFirstToken() {
        return this.first;
    } // new

    public Token getLastToken() {
        return this.last;
    }   // new

    public void jjtSetParent(Node n) {
        this.parent = n;
    }

    public Node jjtGetParent() {
        return this.parent;
    }

    public void jjtAddChild(Node n, int i) {
        if (this.children == null) {
            this.children = new Node[i + 1];
        } else if (i >= this.children.length) {
            Node[] c = new Node[i + 1];
            System.arraycopy(this.children, 0, c, 0, this.children.length);
            this.children = c;
        }
        this.children[i] = n;
    }

    public Node jjtGetChild(int i) {
        return this.children[i];
    }

    public int jjtGetNumChildren() {
        return (this.children == null) ? 0 : this.children.length;
    }

    public void jjtSetValue(Object value) {
        this.value = value;
    }

    public Object jjtGetValue() {
        return this.value;
    }

    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(SqlParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    /**
     * Accept the visitor. *
     */
    public Object childrenAccept(SqlParserVisitor visitor, Object data) {
        if (this.children != null) {
            for (int i = 0; i < this.children.length; ++i) {
                this.children[i].jjtAccept(visitor, data);
            }
        }
        return data;
    }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

    public String toString() {
        return SqlParserTreeConstants.jjtNodeName[this.id];
    }

    private String toString(String prefix) {
        return prefix + this.toString();
    }

  /* Override this method if you want to customize how the node dumps
     out its children. */

    private void dump(String prefix) {
        System.out.println(this.toString(prefix));
        if (this.children != null) {
            for (int i = 0; i < this.children.length; ++i) {
                SimpleNode n = (SimpleNode) this.children[i];
                if (n != null) {
                    n.dump(prefix + " ");
                }
            }
        }
    }
}

/* JavaCC - OriginalChecksum=050137844a6753d9e33170d114a781d1 (do not edit this line) */
