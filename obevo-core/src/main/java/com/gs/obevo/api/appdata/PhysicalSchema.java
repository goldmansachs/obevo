/**
 * Copyright 2017 Goldman Sachs.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.gs.obevo.api.appdata;

import java.util.Objects;

/**
 * Creating this marker class to separate the ideal schema (e.g. myappschema) from the actual
 * physical schema we may deploy to in dev/qa/prod (e.g. myappschema_qa1). This will span either the catalog or
 * catalog + schema combination depending on the DBMS type.
 */
public class PhysicalSchema {
    private final String physicalName;
    private final String subschema;

    public PhysicalSchema(String physicalName) {
        this(physicalName, null);
    }

    public PhysicalSchema(String physicalName, String subschema) {
        this.physicalName = physicalName;
        this.subschema = subschema;
    }

    public static PhysicalSchema parseFromString(String schemaString) {
        String[] schemaParts = schemaString.split("\\.");
        switch (schemaParts.length) {
        case 1:
            return new PhysicalSchema(schemaParts[0]);
        case 2:
            return new PhysicalSchema(schemaParts[0], schemaParts[1]);
        default:
            throw new IllegalArgumentException("Schema string should have at most 1 period in it");
        }
    }

    /**
     * Returns the main schema/catalog name.
     *
     * @since 6.0.0
     */
    public String getPhysicalName() {
        return this.physicalName;
    }

    /**
     * Returns the schema/subschema name within the containing catalog. Not applicable for all DBMS types.
     *
     * @since 6.4.0
     */
    public String getSubschema() {
        return subschema;
    }

    @Override
    public String toString() {
        return subschema == null ? physicalName : physicalName + "." + subschema;
    }

    // // GENERATED BY INTELLIJ ////
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PhysicalSchema that = (PhysicalSchema) o;
        return Objects.equals(physicalName, that.physicalName) &&
                Objects.equals(subschema, that.subschema);
    }

    @Override
    public int hashCode() {
        return Objects.hash(physicalName, subschema);
    }
}
