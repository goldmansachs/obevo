<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2017 Goldman Sachs.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<document xmlns="http://maven.apache.org/XDOC/2.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>Error Handling and Rollback</title>
    </properties>
    <body>
        <p>What do you do when you get a failure during your DB Deployment?</p>

        <p>First, let's understand how Obevo behaves when exceptions occur. Then, let's discuss the problem
            resolution options.
        </p>

        <hr />

        <macro name="toc">
            <param name="fromDepth" value="0" />
            <param name="toDepth" value="2" />
        </macro>

        <section name="Obevo Error Handling Behavior">
            <subsection name="Best-effort execution">
                <p>For each deployment activity, Obevo executes a set of changes. If a change is deployed
                    successfully, then that status is marked in the DeployLog so that following deployments do not try to
                    execute the same change.
                </p>

                <p>For example:
                    <ul>
                        <li>Version 1 of the DB package has changes C1, C2, C3 - assume all pertain to the same object.
                            The deployment succeeds and marks all those as deployed in the log.
                        </li>
                        <li>If we try another deployment, Obevo will detect no changes, as C1, C2, C3 are
                            already marked in the DeployLog
                        </li>
                        <li>Version 2 comes along w/ changes C1, C2, C3, C4, C5, C6, C7 - assume all pertain to the same
                            object. It tries to deploy the difference: C4, C5, C6, C7.
                        </li>
                        <li>Let's say C4 succeeds and then C5 fails. In that case, C4 will be in the DeployLog, C5 will
                            not be, and C6 and C7 will not be (we will not even attempt to do C6 or C7)
                        </li>
                        <li>When re-deploying V2, Obevo will see that C1 - C4 are already deployed, so it picks
                            up where it left off (C5, C6, C7)
                        </li>
                    </ul>
                </p>

                <p>We made special mention in that example that all those changes were in the same object. What if they
                    were changes in different DB objects?
                    <ul>
                        <li>Obevo will do a best effort to deploy all objects even if unrelated objects are
                            failed
                        </li>
                        <li>However, if a change fails for a particular object, then no other changes for that object
                            will get executed
                        </li>
                    </ul>
                </p>

                <p>Replaying the example above from version 2:
                    <ul>
                        <li>Version 2 comes along w/ changes C1, C2, C3, C4, C5, C6, C7 - assume all pertain to the same
                            object. It tries to deploy the difference: C4, C5, C6, C7.
                        </li>
                        <li>Now, let's assume that C4, C5, C6 belong to ObjectA, and C7 belongs to ObjectB.</li>
                        <li>Same as above - let's say C4 succeeds and then C5 fails. We will not attempt to deploy C6
                            as it belonged to the same ObjectA as C5. However, C7 belongs to a different object, and so
                            we do try to deploy that. Let's assume it succeeds.
                        </li>
                        <li>When re-deploying V2, Obevo will see that C1, C2, C3, C4,
                            <b>and C7</b>
                            are already
                            deployed, so it picks up what is remaining (C5, C6)
                        </li>
                    </ul>
                </p>

                <p>Design note: There was some initial debate about this mode (the alternative is to just fail the whole deployment
                    upon any exception); but there was a desire for this best-effort behavior as it made it easier and
                    faster to resolve issues. The check to prevent successive changes within an object from proceeding was
                    the safety feature that allowed the best-effort behavior to work well.
                </p>
            </subsection>
            <subsection name="Transactionality Considerations">
                <p>The above examples assume that each change C1, C2, ... can be executed atomically. It would be a
                    problem if they weren't. e.g.
                    <ul>
                        <li>Obevo only knows about the whole of each change</li>
                        <li>If C1 was executed partially, Obevo will try to execute the change from the beginning</li>
                        <li>Depending on how the change is written, its execution could end up failing</li>
                    </ul>
                </p>

                <p>This proves particularly interesting for DDL changes, as not all DBMS's may be configured to allow
                    transactional execution of DDLs. Hence, if you need to perform a set of actions on a particular object,
                    you should attempt to break it up in as fine grained change statements as possible.
                </p>

                <p>For example: instead of
                    <source><![CDATA[
//// CHANGE name=addColumns
ALTER TABLE myTable ADD COLUMN col1 INT
GO
ALTER TABLE myTable ADD COLUMN col2 INT
GO
ALTER TABLE myTable ADD COLUMN col3 INT
GO
]]></source>
                    do:
                    <source><![CDATA[
//// CHANGE name=addCol1
ALTER TABLE myTable ADD COLUMN col1 INT
GO
//// CHANGE name=addCol2
ALTER TABLE myTable ADD COLUMN col2 INT
GO
//// CHANGE name=addCol3
ALTER TABLE myTable ADD COLUMN col3 INT
GO
]]></source>

                </p>

                <p>Understandably, the finer-grained the changes are, the more clutter that would exist in your code.
                    This is the trade-off that you should think about. With Obevo, we strove to make it as
                    easy as possible to split it up without too much clutter. (e.g. at least you can split this changes
                    within the same file using some text syntax, instead of having to keep them in separate files as
                    other DB Deployment tools may have you do)
                </p>
            </subsection>
        </section>
        <section name="Error-handling during deployment">
            <p>Now that we understand how Obevo behaves when encountering errors, here is guidance on how you
                should handle errors as a user
            </p>

            <h3>Analyze the issue</h3>
            <p>Start w/ analyzing the exception message. Most databases will give error messages with a code and a message;
                use those as hints. e.g. googling
                <a href="https://www.google.com/?gws_rd=ssl#q=db2+error+code+204">"db2 error code [yourErrorCode]"</a>
                will usually find you a page linking to the error description on IBM's page.
            </p>

            <p>Once you've diagnosed an issue, you have a couple options:</p>

            <h3>Option 1 - fix the underlying environment and rerun</h3>
            <p>At times, the error may be environmental and not something controllable from your DB code, e.g. users/groups
                not having been setup correctly, running out of disk space, and so on.
            </p>

            <p>In such cases, fix the underlying issue and rerun the deployment. Per the Error Handling behavior
                description above, the deployment will pick up where it left off.
            </p>

            <p>If this happens to fix the issue, then great. Otherwise, we move on to Option 2</p>

            <h3>Option 2 - rollback or rollforward</h3>
            <p>This deserves its own page - see the
                <a href="rollback.html">Rollback Page</a>
                for more information.
            </p>
        </section>
    </body>
</document>