<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2017 Goldman Sachs.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<document xmlns="http://maven.apache.org/XDOC/2.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>Multiple Schema Management</title>
    </properties>
    <body>
        <section name="Multiple Schema Management Overview">
            <p>Obevo's configuration lets you define multiple logical schemas in a single system-config.xml
                file. And you are free to define as many system-config.xml files or logical schemas as you want to for your
                application.
            </p>

            <p>The question is - how exactly should you map your physical schemas, logical schemas, and application
                products? This page will run through some options.
            </p>

        </section>
        <section name="Base case - one-to-one mapping between logical schema and physical schema and software product">
            <p>In the simplest case, your production physical schema is mapped to a single software product, which
                would define a single logical schema in your system-config.xml. You can then define multiple
                environments off this single logical schema, whether with multiple
                <i>dbEnvironment</i>
                entries in your
                system-config.xml file, or by tokenizing the system-config.xml file against different environments
                (but keeping the same logical schema list).
            </p>

            <p>This is the example given to you in the kata</p>

            <p>If this works for you, then stick with it. The following sections will describe alternate cases, either:
                <ul>
                    <li>A) Mapping multiple logical schemas to the same system-config.xml file (thus managing multiple schemas together</li>
                    <li>B) Defining object files for a particular physical schema across multiple objects</li>
                    <li>C) Mapping multiple logical schemas to the same physical schema (a rarer use case)</li>
                </ul>
            </p>
        </section>
        <section name="A) Mapping multiple logical schemas to the same system-config.xml file">
            <p>A few requirements are needed for a team to consider managing multiple logical schemas in the same
                system-config.xml file. If all of the following do not fit for your use case, then consider keeping them
                separate.
            </p>

            <h3>Schemas are deployed to in the same release cycle</h3>
            <p>Currently, the smallest unit of work for Obevo is the dbEnvrionment. Hence, each logical schema
                would get deployed for such environments.
            </p>

            <h3>Schemas always exist on the same servers in all environments</h3>
            <p>i.e. If SCHEMA1 and SCHEMA2 are both found in your production environment, then you also expect them to
                be deployed together in all other environments
            </p>

            <p>NOTE - this implies that only 1 primary DB type is supported for all environments in your system-config.</p>

            <h3>Same password is used to login to all schemas</h3>
            <p>As one deploy execution would apply to all schemas, it is thus assumed that the same login would apply
                for all. This is particularly relevant for:
                <ul>
                    <li>Sybase ASE - since different schemas/databases can have different permissions, thus your login
                        should have the deploy rights on all DBs
                    </li>
                    <li>Sybase IQ - though the default mode is to login as the schema user, the password must be the
                        same across all to allow the same input command to deploy to all schemas
                    </li>
                </ul>
            </p>

            <h3>(Optional) Circular dependency across schemas</h3>
            <p>The multiple-schema setup can be useful to handle circular dependency issues across scheams, e.g.
                <ul>
                    <li>Schema1.ObjectA depends on Schema2.ObjectB</li>
                    <li>Schema2.ObjectB depends on Schema1.ObjectC</li>
                </ul>
            </p>

            <p>Let's start with the simpler use cases:
                <ul>
                    <li>If the schema objects do not refer to other schemas, then your setup can be done however you choose.</li>
                    <li>If one schema's objects refers to those of another (but not vice versa), you can optionally manage
                        it separately (i.e. separate system-config.xml files). However, you must execute the deployments in order.
                        Though it is no problem to manage them together
                    </li>
                </ul>
            </p>

            <p>If the two schemas did depend on each other, then it would be hard to manage them separate due to the
                deploy order requiring deploys back and forth across the schemas.
            </p>

            <p>Managing the logical schemas together in the same system-config.xml file will resolve the deploy order
                issue, as the deploy algorithm can handle any sort of deploy ordering.
            </p>
        </section>
        <section name="B) Defining object files for a particular physical schema across multiple objects">
            <p>A physical schema may be shared by multiple teams. The preference is to manage these as one logical schema
                and to deploy together (see the
                <a href="onboarding-guide.html">Onboarding Guide FAQ</a>
                for justification of this).
            </p>

            <p>That said - teams may still want to keep the files maintained in separate modules. If you choose this
                route, then at build-time, the various modules need to have their DDLs combined in one place so that
                Obevo can execute the deployment.
            </p>

            <p>It is up to teams to decide how to merge across different modules. Ultimately, this depends on the build
                and dependency mechanisms that your team uses, and Obevo is agnostic of the build system teams
                choose to use.
            </p>
        </section>
        <section name="C) Mapping multiple logical schemas to the same physical schema">
            <p>If in the worst-case the teams that deploy to the same physical schema still do not want to deploy at
                the same time and want to maintain their own objects, then they can do so by simply defining different
                logical schemas for their objects.
            </p>

            <p>Those logical schemas can still map to the same physical schema - Obevo is able to segregate the
                different logical schemas defined in a physical schema.
            </p>

            <p>However, note that this involves a lot of complexity in your setup, notably around if you can truly
                guarantee that each logical schema is independent of each other in that physical schema (see the
                <a href="onboarding-guide.html">Onboarding Guide FAQ</a>
                for more info). Thus, we highly discourage this
                route, but it is technically possible to implement.
            </p>
        </section>
    </body>
</document>